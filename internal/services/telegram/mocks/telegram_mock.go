// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package telemock

import (
	"context"
	"github.com/anvh2/futures-trading/internal/services/telegram"
	"sync"
)

// Ensure, that NotifyMock does implement telegram.Notify.
// If this is not the case, regenerate this file with moq.
var _ telegram.Notify = &NotifyMock{}

// NotifyMock is a mock implementation of telegram.Notify.
//
//	func TestSomethingThatUsesNotify(t *testing.T) {
//
//		// make and configure a mocked telegram.Notify
//		mockedNotify := &NotifyMock{
//			PushNotifyFunc: func(ctx context.Context, chatId int64, message string) error {
//				panic("mock out the PushNotify method")
//			},
//			StopFunc: func()  {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedNotify in code that requires telegram.Notify
//		// and then make assertions.
//
//	}
type NotifyMock struct {
	// PushNotifyFunc mocks the PushNotify method.
	PushNotifyFunc func(ctx context.Context, chatId int64, message string) error

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// PushNotify holds details about calls to the PushNotify method.
		PushNotify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatId is the chatId argument value.
			ChatId int64
			// Message is the message argument value.
			Message string
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockPushNotify sync.RWMutex
	lockStop       sync.RWMutex
}

// PushNotify calls PushNotifyFunc.
func (mock *NotifyMock) PushNotify(ctx context.Context, chatId int64, message string) error {
	if mock.PushNotifyFunc == nil {
		panic("NotifyMock.PushNotifyFunc: method is nil but Notify.PushNotify was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ChatId  int64
		Message string
	}{
		Ctx:     ctx,
		ChatId:  chatId,
		Message: message,
	}
	mock.lockPushNotify.Lock()
	mock.calls.PushNotify = append(mock.calls.PushNotify, callInfo)
	mock.lockPushNotify.Unlock()
	return mock.PushNotifyFunc(ctx, chatId, message)
}

// PushNotifyCalls gets all the calls that were made to PushNotify.
// Check the length with:
//
//	len(mockedNotify.PushNotifyCalls())
func (mock *NotifyMock) PushNotifyCalls() []struct {
	Ctx     context.Context
	ChatId  int64
	Message string
} {
	var calls []struct {
		Ctx     context.Context
		ChatId  int64
		Message string
	}
	mock.lockPushNotify.RLock()
	calls = mock.calls.PushNotify
	mock.lockPushNotify.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *NotifyMock) Stop() {
	if mock.StopFunc == nil {
		panic("NotifyMock.StopFunc: method is nil but Notify.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedNotify.StopCalls())
func (mock *NotifyMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
