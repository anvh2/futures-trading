// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cachemock

import (
	"github.com/anvh2/futures-trading/internal/cache"
	"sync"
)

// Ensure, that BasicMock does implement cache.Basic.
// If this is not the case, regenerate this file with moq.
var _ cache.Basic = &BasicMock{}

// BasicMock is a mock implementation of cache.Basic.
//
//	func TestSomethingThatUsesBasic(t *testing.T) {
//
//		// make and configure a mocked cache.Basic
//		mockedBasic := &BasicMock{
//			ExsFunc: func(key string) bool {
//				panic("mock out the Exs method")
//			},
//			GetFunc: func(key string) interface{} {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(key string, value interface{})  {
//				panic("mock out the Set method")
//			},
//			SetEXFunc: func(key string, value interface{}) (interface{}, bool) {
//				panic("mock out the SetEX method")
//			},
//		}
//
//		// use mockedBasic in code that requires cache.Basic
//		// and then make assertions.
//
//	}
type BasicMock struct {
	// ExsFunc mocks the Exs method.
	ExsFunc func(key string) bool

	// GetFunc mocks the Get method.
	GetFunc func(key string) interface{}

	// SetFunc mocks the Set method.
	SetFunc func(key string, value interface{})

	// SetEXFunc mocks the SetEX method.
	SetEXFunc func(key string, value interface{}) (interface{}, bool)

	// calls tracks calls to the methods.
	calls struct {
		// Exs holds details about calls to the Exs method.
		Exs []struct {
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
		}
		// SetEX holds details about calls to the SetEX method.
		SetEX []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
		}
	}
	lockExs   sync.RWMutex
	lockGet   sync.RWMutex
	lockSet   sync.RWMutex
	lockSetEX sync.RWMutex
}

// Exs calls ExsFunc.
func (mock *BasicMock) Exs(key string) bool {
	if mock.ExsFunc == nil {
		panic("BasicMock.ExsFunc: method is nil but Basic.Exs was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockExs.Lock()
	mock.calls.Exs = append(mock.calls.Exs, callInfo)
	mock.lockExs.Unlock()
	return mock.ExsFunc(key)
}

// ExsCalls gets all the calls that were made to Exs.
// Check the length with:
//
//	len(mockedBasic.ExsCalls())
func (mock *BasicMock) ExsCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockExs.RLock()
	calls = mock.calls.Exs
	mock.lockExs.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *BasicMock) Get(key string) interface{} {
	if mock.GetFunc == nil {
		panic("BasicMock.GetFunc: method is nil but Basic.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedBasic.GetCalls())
func (mock *BasicMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *BasicMock) Set(key string, value interface{}) {
	if mock.SetFunc == nil {
		panic("BasicMock.SetFunc: method is nil but Basic.Set was just called")
	}
	callInfo := struct {
		Key   string
		Value interface{}
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(key, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedBasic.SetCalls())
func (mock *BasicMock) SetCalls() []struct {
	Key   string
	Value interface{}
} {
	var calls []struct {
		Key   string
		Value interface{}
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// SetEX calls SetEXFunc.
func (mock *BasicMock) SetEX(key string, value interface{}) (interface{}, bool) {
	if mock.SetEXFunc == nil {
		panic("BasicMock.SetEXFunc: method is nil but Basic.SetEX was just called")
	}
	callInfo := struct {
		Key   string
		Value interface{}
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSetEX.Lock()
	mock.calls.SetEX = append(mock.calls.SetEX, callInfo)
	mock.lockSetEX.Unlock()
	return mock.SetEXFunc(key, value)
}

// SetEXCalls gets all the calls that were made to SetEX.
// Check the length with:
//
//	len(mockedBasic.SetEXCalls())
func (mock *BasicMock) SetEXCalls() []struct {
	Key   string
	Value interface{}
} {
	var calls []struct {
		Key   string
		Value interface{}
	}
	mock.lockSetEX.RLock()
	calls = mock.calls.SetEX
	mock.lockSetEX.RUnlock()
	return calls
}
