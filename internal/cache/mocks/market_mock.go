// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cachemock

import (
	"github.com/anvh2/futures-trading/internal/cache"
	"github.com/anvh2/futures-trading/internal/cache/market"
	"sync"
)

// Ensure, that MarketMock does implement cache.Market.
// If this is not the case, regenerate this file with moq.
var _ cache.Market = &MarketMock{}

// MarketMock is a mock implementation of cache.Market.
//
//	func TestSomethingThatUsesMarket(t *testing.T) {
//
//		// make and configure a mocked cache.Market
//		mockedMarket := &MarketMock{
//			CandleSummaryFunc: func(symbol string) (*market.CandleSummary, error) {
//				panic("mock out the CandleSummary method")
//			},
//			CreateSummaryFunc: func(symbol string) *market.CandleSummary {
//				panic("mock out the CreateSummary method")
//			},
//			UpdateSummaryFunc: func(symbol string) *market.CandleSummary {
//				panic("mock out the UpdateSummary method")
//			},
//		}
//
//		// use mockedMarket in code that requires cache.Market
//		// and then make assertions.
//
//	}
type MarketMock struct {
	// CandleSummaryFunc mocks the CandleSummary method.
	CandleSummaryFunc func(symbol string) (*market.CandleSummary, error)

	// CreateSummaryFunc mocks the CreateSummary method.
	CreateSummaryFunc func(symbol string) *market.CandleSummary

	// UpdateSummaryFunc mocks the UpdateSummary method.
	UpdateSummaryFunc func(symbol string) *market.CandleSummary

	// calls tracks calls to the methods.
	calls struct {
		// CandleSummary holds details about calls to the CandleSummary method.
		CandleSummary []struct {
			// Symbol is the symbol argument value.
			Symbol string
		}
		// CreateSummary holds details about calls to the CreateSummary method.
		CreateSummary []struct {
			// Symbol is the symbol argument value.
			Symbol string
		}
		// UpdateSummary holds details about calls to the UpdateSummary method.
		UpdateSummary []struct {
			// Symbol is the symbol argument value.
			Symbol string
		}
	}
	lockCandleSummary sync.RWMutex
	lockCreateSummary sync.RWMutex
	lockUpdateSummary sync.RWMutex
}

// CandleSummary calls CandleSummaryFunc.
func (mock *MarketMock) CandleSummary(symbol string) (*market.CandleSummary, error) {
	if mock.CandleSummaryFunc == nil {
		panic("MarketMock.CandleSummaryFunc: method is nil but Market.CandleSummary was just called")
	}
	callInfo := struct {
		Symbol string
	}{
		Symbol: symbol,
	}
	mock.lockCandleSummary.Lock()
	mock.calls.CandleSummary = append(mock.calls.CandleSummary, callInfo)
	mock.lockCandleSummary.Unlock()
	return mock.CandleSummaryFunc(symbol)
}

// CandleSummaryCalls gets all the calls that were made to CandleSummary.
// Check the length with:
//
//	len(mockedMarket.CandleSummaryCalls())
func (mock *MarketMock) CandleSummaryCalls() []struct {
	Symbol string
} {
	var calls []struct {
		Symbol string
	}
	mock.lockCandleSummary.RLock()
	calls = mock.calls.CandleSummary
	mock.lockCandleSummary.RUnlock()
	return calls
}

// CreateSummary calls CreateSummaryFunc.
func (mock *MarketMock) CreateSummary(symbol string) *market.CandleSummary {
	if mock.CreateSummaryFunc == nil {
		panic("MarketMock.CreateSummaryFunc: method is nil but Market.CreateSummary was just called")
	}
	callInfo := struct {
		Symbol string
	}{
		Symbol: symbol,
	}
	mock.lockCreateSummary.Lock()
	mock.calls.CreateSummary = append(mock.calls.CreateSummary, callInfo)
	mock.lockCreateSummary.Unlock()
	return mock.CreateSummaryFunc(symbol)
}

// CreateSummaryCalls gets all the calls that were made to CreateSummary.
// Check the length with:
//
//	len(mockedMarket.CreateSummaryCalls())
func (mock *MarketMock) CreateSummaryCalls() []struct {
	Symbol string
} {
	var calls []struct {
		Symbol string
	}
	mock.lockCreateSummary.RLock()
	calls = mock.calls.CreateSummary
	mock.lockCreateSummary.RUnlock()
	return calls
}

// UpdateSummary calls UpdateSummaryFunc.
func (mock *MarketMock) UpdateSummary(symbol string) *market.CandleSummary {
	if mock.UpdateSummaryFunc == nil {
		panic("MarketMock.UpdateSummaryFunc: method is nil but Market.UpdateSummary was just called")
	}
	callInfo := struct {
		Symbol string
	}{
		Symbol: symbol,
	}
	mock.lockUpdateSummary.Lock()
	mock.calls.UpdateSummary = append(mock.calls.UpdateSummary, callInfo)
	mock.lockUpdateSummary.Unlock()
	return mock.UpdateSummaryFunc(symbol)
}

// UpdateSummaryCalls gets all the calls that were made to UpdateSummary.
// Check the length with:
//
//	len(mockedMarket.UpdateSummaryCalls())
func (mock *MarketMock) UpdateSummaryCalls() []struct {
	Symbol string
} {
	var calls []struct {
		Symbol string
	}
	mock.lockUpdateSummary.RLock()
	calls = mock.calls.UpdateSummary
	mock.lockUpdateSummary.RUnlock()
	return calls
}
